{"meta":{"title":"Winnie's cabin","subtitle":null,"description":null,"author":"Winnie Pong","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"kubernetes网络方案calico","slug":"kubernetes网络方案calico","date":"2017-09-18T09:58:11.000Z","updated":"2017-09-18T09:58:46.000Z","comments":true,"path":"2017/09/18/kubernetes网络方案calico/","link":"","permalink":"http://yoursite.com/2017/09/18/kubernetes网络方案calico/","excerpt":"","text":"环境系统：centos7.3192.168.40.50 local-master192.168.40.51 local-node1192.168.40.52 local-node21234567master:kubernetes-master-1.5.2-0.2.gitc55cf2b.el7.x86_64kubernetes-client-1.5.2-0.2.gitc55cf2b.el7.x86_64etcd-3.1.0-2.el7.x86_64docker-client-1.12.6-11.el7.centos.x86_64docker-1.12.6-11.el7.centos.x86_64docker-common-1.12.6-11.el7.centos.x86_64 123456node:kubernetes-client-1.5.2-0.2.gitc55cf2b.el7.x86_64kubernetes-node-1.5.2-0.2.gitc55cf2b.el7.x86_64docker-client-1.12.6-11.el7.centos.x86_64docker-1.12.6-11.el7.centos.x86_64docker-common-1.12.6-11.el7.centos.x86_64 一. 修改各节点docker ipmaster:1234vi /usr/lib/systemd/system/docker.service--bip=172.25.0.1/24 \\# systemctl daemon-reload# systemctl restart docker node1：1234vi /usr/lib/systemd/system/docker.service--bip=172.25.1.1/24 \\# systemctl daemon-reload# systemctl restart docker node2：1234vi /usr/lib/systemd/system/docker.service--bip=172.25.2.1/24 \\# systemctl daemon-reload# systemctl restart docker 二.下载插件master：12345678# wget https://github.com/projectcalico/calicoctl/releases/download/v1.1.0/calicoctl# chmod +x calicoctl# mv calicoctl /usr/bin/# docker pull docker.io/calico/node:v1.1.0# docker tag docker.io/calico/node:v1.1.0 quay.io/calico/node:v1.1.0# wget -N -P /opt/cni/bin/ https://github.com/projectcalico/calico-cni/releases/download/v1.6.0/calico# wget -N -P /opt/cni/bin/ https://github.com/projectcalico/calico-cni/releases/download/v1.6.0/calico-ipam# chmod +x /opt/cni/bin/calico /opt/cni/bin/calico-ipam node12345# docker pull docker.io/calico/node:v1.1.0# docker tag docker.io/calico/node:v1.1.0 quay.io/calico/node:v1.1.0# wget -N -P /opt/cni/bin/ https://github.com/projectcalico/calico-cni/releases/download/v1.6.0/calico# wget -N -P /opt/cni/bin/ https://github.com/projectcalico/calico-cni/releases/download/v1.6.0/calico-ipam# chmod +x /opt/cni/bin/calico /opt/cni/bin/calico-ipam 三. 配置文件参考：http://docs.projectcalico.org/v2.1/usage/configuration/as-service集群所有主机都需要配置以下三个文件创建calico-node启动文件12345678910111213141516171819202122232425262728293031# vim /usr/lib/systemd/system/calico-node.service[Unit]Description=calico-nodeAfter=docker.serviceRequires=docker.service[Service]EnvironmentFile=/etc/calico/calico.envExecStartPre=-/usr/bin/docker rm -f calico-nodeExecStart=/usr/bin/docker run --net=host --privileged \\ --name=calico-node \\ -e NODENAME=$&#123;CALICO_NODENAME&#125; \\ -e IP=$&#123;CALICO_IP&#125; \\ -e IP6=$&#123;CALICO_IP6&#125; \\ -e CALICO_NETWORKING_BACKEND=$&#123;CALICO_NETWORKING_BACKEND&#125; \\ -e AS=$&#123;CALICO_AS&#125; \\ -e NO_DEFAULT_POOLS=$&#123;CALICO_NO_DEFAULT_POOLS&#125; \\ -e CALICO_LIBNETWORK_ENABLED=$&#123;CALICO_LIBNETWORK_ENABLED&#125; \\ -e ETCD_ENDPOINTS=$&#123;ETCD_ENDPOINTS&#125; \\ -e ETCD_CA_CERT_FILE=$&#123;ETCD_CA_CERT_FILE&#125; \\ -e ETCD_CERT_FILE=$&#123;ETCD_CERT_FILE&#125; \\ -e ETCD_KEY_FILE=$&#123;ETCD_KEY_FILE&#125; \\ -v /var/log/calico:/var/log/calico \\ -v /run/docker/plugins:/run/docker/plugins \\ -v /lib/modules:/lib/modules \\ -v /var/run/calico:/var/run/calico \\ quay.io/calico/node:v1.1.0ExecStop=-/usr/bin/docker stop calico-node[Install]WantedBy=multi-user.target 创建calico-node服务的环境文件12345678910111213# vi /etc/calico/calico.envETCD_ENDPOINTS=http://local-master:2379ETCD_CA_FILE=&quot;&quot;ETCD_CERT_FILE=&quot;&quot;ETCD_KEY_FILE=&quot;&quot;CALICO_NODENAME=&quot;&quot;CALICO_NO_DEFAULT_POOLS=&quot;&quot;#CALICO_IP=&quot;&quot;CALICO_IP=&quot;&quot;CALICO_IP6=&quot;&quot;CALICO_AS=&quot;&quot;CALICO_LIBNETWORK_ENABLED=trueCALICO_NETWORKING_BACKEND=bird 创建CNI网络配置文件，用于通知kubernetes创建一个名为calico-k8s-network的网络，并对此网络使用calico插件12345678910111213# mkdir /etc/cni/net.d# vi /etc/cni/net.d/10-calico.conf&#123; &quot;name&quot;: &quot;calico-k8s-network&quot;, &quot;type&quot;: &quot;calico&quot;, &quot;etcd_endpoints&quot;: &quot;http://local-master:2379&quot;, &quot;log_level&quot;: &quot;info&quot;, &quot;ipam&quot;: &#123; &quot;type&quot;: &quot;calico-ipam&quot; &#125;, &quot;policy&quot;: &#123; &quot;type&quot;: &quot;k8s&quot; &#125; master主机上修改123456789# vim /etc/etcd/etcd.conf# [member]ETCD_NAME=defaultETCD_DATA_DIR=&quot;/var/lib/etcd/default.etcd&quot;ETCD_LISTEN_PEER_URLS=&quot;http://local-master:2380&quot;ETCD_LISTEN_CLIENT_URLS=&quot;http://0.0.0.0:2379&quot;#[cluster]ETCD_INITIAL_CLUSTER=&quot;default=http://local-master:2380&quot;ETCD_ADVERTISE_CLIENT_URLS=http://local-master:2379 master 主机上wget http://docs.projectcalico.org/v1.5/getting-started/kubernetes/installation/policy-controller.yaml修改 policy-controller.yaml文件里的etcd的地址 四. 启动master12# serivce etcd restart# kubectl create -f policy-controller.yaml 每个节点上启动calico-node服务123# systemctl enable calico-node# systemctl start calico-node# export ETCD_AUTHORITY=local-master:2379 五.验证calico是否启动正常calicoctl node statuscalicoctl get nodes --out=wide 六.添加子网1234567891011[root@local-master v1.1.0]# cat pool.yaml apiVersion: v1kind: ipPoolmetadata: cidr: 172.25.0.0/16spec: ipip: enabled: true mode: always nat-outgoing: true[root@local-master v1.1.0]# calicoctl apply -f pool.yaml 查看子网 七.修改node上的配置设置kube-proxy服务的proxy-mode配置为iptables，修改配置文件/etc/kubernetes/proxy：KUBE_PROXY_ARGS=&quot; --proxy-mode=iptables&quot;service kube-proxy restart 八.测试两个node分别创建一个容器，两个容器内能互ping成功相关：http://docs.projectcalico.org/v2.1/introduction/http://www.tuicool.com/articles/RVba2yrhttp://blog.dataman-inc.com/shurenyun-docker-133/","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-09-18T08:59:14.000Z","updated":"2017-09-18T08:59:14.000Z","comments":true,"path":"2017/09/18/hello-world/","link":"","permalink":"http://yoursite.com/2017/09/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}